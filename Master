
#include <math.h>


#define MAXPWM 200 //MAXPWM <255 or motor driver overheats.
#define TGTTEMP 75 // deg C
#define THERMISTORPIN A5
#define NUMSAMPLES 5


#define BRAKEVCC 0
#define CW   1
#define CCW  2
#define BRAKEGND 3
#define CS_THRESHOLD 100



uint32_t user_command;
String inputString = "stop";
int state = 0; // 0 = HeatOff, 1 = HeatOn, 2 = HeatMaintaining
unsigned long HeatStart, HeatElapsed, HeatRemaining; //Max Heat time Variables
unsigned long AgDirStart, AgDirElapsed, AgDirRemaining; //Agitator Direction Time Tracking Variables
int AgDir = 1; //current direction 1 = CW, 2=CCW
unsigned long AgDirCWTime = 500; // x seconds
unsigned long AgDirCCWTime = 400; // x seconds

unsigned long IndicateHeatOn, IndicateHeatOnElapsed; //Heating Indicator  Time Tracking Variables




//Adjust the max heat time as desired for estimated print time
unsigned long maxTime = 43200000; ///43200000;  12hrs 

int samples[NUMSAMPLES];
/*  VNH2SP30 pin definitions
  xxx[0] controls '1' outputs
  xxx[1] controls '2' outputs */
int inApin[2] = {7, 4};  // INA: Clockwise input
int inBpin[2] = {8, 9}; // INB: Counter-clockwise input
int pwmpin[2] = {5, 6}; // PWM input
int cspin[2] = {2, 3}; // CS: Current sense ANALOG input
int enpin[2] = {0, 1}; // EN: Status of switches output (Analog pin)

int startPin = 3; // turns agitator on/off
int SpeedPIN = A5; //potentiometer to control agitation speed
int MotorSpeed;


//LED Indicators
int ledBLUE = 13;  //BLUE
int ledRED = 12;  //RED
int LEDHeater = 10;  //Orange
int ledFOUR = 2;  //Orange


bool resetCalled;
bool timedOut;

int Heater = 0; //motor output for heater
int Agitator = 1; //motor output for agitator



int HeatPWM = 255;
int AgPWM = 100;

float cA, cB;
float targetTemp, temperature;

//Thermistor temp(THERMISTORPIN); // set up thermister

void setup()
{
  targetTemp = TGTTEMP;
  Serial.begin(115200);
  pinMode(startPin, INPUT_PULLUP);
  //pinMode(SpeedPIN, INPUT);
  
  pinMode(ledRED, OUTPUT);
  pinMode(ledBLUE, OUTPUT);
  pinMode(LEDHeater, OUTPUT);
  pinMode(ledFOUR, OUTPUT);


  // Initialize digital pins as outputs
  for (int i = 0; i < 2; i++)
  {
    pinMode(inApin[i], OUTPUT);
    pinMode(inBpin[i], OUTPUT);
    pinMode(pwmpin[i], OUTPUT);
  }
  // Initialize braked
  for (int i = 0; i < 2; i++)
  {
    digitalWrite(inApin[i], LOW);
    digitalWrite(inBpin[i], LOW);
  }

  HeatStart = millis();
  //run_command(1);
}

void loop()
{

          digitalWrite(ledRED, HIGH);

   


          
          
  if (digitalRead(startPin) == HIGH && (HeatElapsed == 0 || HeatElapsed < maxTime || resetCalled==true)) 
  {
       if(resetCalled == true){
          resetCalled = false;
          timedOut = false;
          HeatElapsed = 0;
       }
       
       HeatStart = millis(); //Set starttime
       
       while (digitalRead(startPin) == HIGH && (HeatElapsed == 0 || HeatElapsed < maxTime))
       {
          heatUp();
          runAgitator(1);
       }
    
  } else {
      if (timedOut == false && HeatElapsed > maxTime){
        timedOut= true;
      }
      
      heatbedOff(Heater);
      runAgitator(0);

      if (digitalRead(startPin) == LOW) 
      {timedOut = false;
      digitalWrite(ledBLUE, LOW);
      }
      else if (timedOut = true)
      {
        Serial.println("Time Stop");
        IndicateTimeOut(ledBLUE);
        if(digitalRead(startPin) == LOW) 
        {
          resetCalled = true;
          
        }
  }

}
}


void runAgitator(int State)
{
int sendCmd = 0;

          Serial.println(analogRead(4));
          //Serial.print("MotorSpeed: ");
          //Serial.println(MotorSpeed);


  switch (State)https://www.arduino.cc/
  {
    case 1: 
          AgDirElapsed = millis() - AgDirStart;
            
        switch (AgDir) 
        {
          case CW:
            if (AgDirElapsed > AgDirCWTime)
            {
              AgDir = CCW;
              AgDirStart = millis();
              sendCmd = 1;
            }
            break;
       
          case CCW:
            if (AgDirElapsed > AgDirCCWTime)
            {
              AgDir = CW;
              AgDirStart = millis();
              sendCmd = 1;
      
            } 
            break;
      
          default:
              AgDir = CW;
              AgDirStart = millis();
              sendCmd = 1;
              
            break;
        }
      
        if (sendCmd = 1)
        {
          
          
          MotorCmd(Agitator,AgDir,AgPWM);
        } 
        
        break;
  case 0:
    //MotorCmd(Agitator,CW,AgPWM);

    MotorCmd(Agitator,0,0);
    break;
    
  default:
    MotorCmd(Agitator,0,0);
    break;
  }
}

void heatUp()
{
  
  

        targetTemp =  TGTTEMP;
        HeatElapsed = millis() - HeatStart;
    
        temperature = GetTemp();
    
        if (state == 0) 
        {
            state = 1;
            HeatPWM = MAXPWM;
        }
    
    
    
        if (temperature > targetTemp  )
            {                                 //Maintenance Temp
              state = 2;
              HeatPWM = max(HeatPWM - 1, 0);
              IndicateHeated(LEDHeater);
            }
        
        else
            {                                 //Full On Heat
              HeatPWM = min(HeatPWM + 1, MAXPWM);
              IndicateHeating(LEDHeater);
            }
    
                                              //Send Command
        HeatCmd(Heater, HeatPWM);
        
      
      
    displayResult();

  }




void heatbedOff(int motor)
{
  // Initialize off
 digitalWrite(LEDHeater,LOW);
  
  for (int i = 0; i < 2; i++)
  {
    digitalWrite(inApin[i], LOW);
    digitalWrite(inBpin[i], LOW);
  }
  analogWrite(pwmpin[motor], 0);
 
  state = 0;
}

void HeatCmd(uint8_t Heater, uint8_t pwm)
  {
      /* HeatCmd() will set a heater running at the PWM speed commanded. 
          pwm: should be a value between 0 and 255, higher the number, the higher the heat
      */
        digitalWrite(inApin[Heater], LOW);
        digitalWrite(inBpin[Heater], HIGH);
        analogWrite(pwmpin[Heater], pwm);

  }


void IndicateHeating(int LED)
{
   //Flash LED to indicate heating
    int curState;
    unsigned long Interval = 250;
    
    IndicateHeatOnElapsed = millis() - IndicateHeatOn;


  
    if(digitalRead(LED) == LOW)
    {
      curState = LOW;
    }else
    {
      curState = HIGH;
    }
    
    
    
    if(IndicateHeatOnElapsed > Interval) 
    {      
      if(curState == HIGH)
      {
        digitalWrite(LED, LOW);
        IndicateHeatOn = millis();
      }else
      {
        digitalWrite(LED, HIGH);
        IndicateHeatOn = millis();
      }
    }
}



void IndicateHeated(int LED)
{
 //Flash LED to indicate heating
  IndicateHeatOn = millis();
  digitalWrite(LED, HIGH);

}

void IndicateTimeOut(int LED)
{
   //Flash LED to indicate heating
    int curState;
    unsigned long Interval = 1000;
    
    IndicateHeatOnElapsed = millis() - IndicateHeatOn;


  
    if(digitalRead(LED) == LOW)
    {
      curState = LOW;
    }else
    {
      curState = HIGH;
    }
    
    
    
    if(IndicateHeatOnElapsed > Interval) 
    {      
      if(curState == HIGH)
      {
        digitalWrite(LED, LOW);
        IndicateHeatOn = millis();
      }else
      {
        digitalWrite(LED, HIGH);
        IndicateHeatOn = millis();
      }
    }
}

void MotorCmd(uint8_t motor, uint8_t direct, uint8_t pwm)
{
  /* MotorCmd() will set a motor going in a specific direction
  the motor will continue going in that direction, at that speed
  until told to do otherwise.

  motor: this should be either 0 or 1, will select which of the two
  motors to be controlled

  direct: Should be between 0 and 3, with the following result
  0: Brake to VCC
  1: Clockwise
  2: CounterClockwise
  3: Brake to GND

  pwm: should be a value between ? and 1023, higher the number, the faster
  it'll go
*/
  
  
  if (motor <= 1)
  {
    if (direct <= 4)
    {
      // Set inA[motor]
      if (direct <= 1)
      {
        digitalWrite(inApin[motor], HIGH);
      }
      else
      {
        digitalWrite(inApin[motor], LOW);
        //Serial.println("d1");
      }

      // Set inB[motor]
      if ((direct == 0) || (direct == 2)) {
        digitalWrite(inBpin[motor], HIGH);
      }
      else
      {
        digitalWrite(inBpin[motor], LOW);
      }
      analogWrite(pwmpin[motor], pwm);
    }
  }
}


float GetTemp() {
   
      uint8_t i;
  float average;
  
    // get smooth temperature readings:
    // take N samples in a row, with a slight delay
    for (i = 0; i < NUMSAMPLES; i++) {
      samples[i] = analogRead(THERMISTORPIN);
      Serial.println(samples[i]);
      //delay(10);
    }
    // average all the samples out
    average = 0;
    for (i = 0; i < NUMSAMPLES; i++) {
      average += samples[i];
    }
    average /= NUMSAMPLES;
    temperature = Thermistor(average);
    return temperature;
}

// http://mathscinotes.com/2011/07/thermistor-mathematics/
float Thermistor(float aveADC) {
  float R1 = 9000.;
  //float Ro = 101000.;
  float Ro = 90000.;
  float beta = 3950.;
  float To = 298.15;
  float R;
  float Temp;

  R  = R1 * (1023. / aveADC - 1.);
  //Serial.println(R);
  Temp = 1 / ((1 / beta) * log(R / Ro) + 1 / To);
  Temp = Temp - 273.15;            // Convert Kelvin to Celcius
  //Temp = (Temp * 9.0) / 5.0 + 32.0; // Convert Celcius to Fahrenheit
  return Temp;
}


// used for debugging output to serial monitor
void displayResult()  {
 return;
  float h, m, s, ms;
  unsigned long over;
  HeatRemaining = maxTime - HeatElapsed;
  h = int(HeatRemaining / 3600000);
  over = HeatRemaining % 3600000;

  m = int(over / 60000);
  over = over % 60000;
  s = int(over / 1000);
  //cA = analogRead(cspin[0]);
  //cB = analogRead(cspin[1]);
  Serial.print("Temp: ");
  Serial.print(temperature);
  Serial.print(" / ");
  Serial.print(targetTemp);
    Serial.print("   STATE: ");
  Serial.print(state);
  
  Serial.print("   PWM: ");
  Serial.print(HeatPWM);
  Serial.print("  HeatRemaining: ");
  Serial.print(h, 0);
  Serial.print(":");
  Serial.print(m, 0);
  Serial.print(":");
  Serial.println(s, 0);

}



